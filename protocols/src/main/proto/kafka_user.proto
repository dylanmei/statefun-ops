syntax = "proto3";

package ops.protocols.kafka;

option java_package = "ops.protocols.kafka.generated";
option java_multiple_files = true;

// State of a Kafka user
message KafkaUser {
  string user_name = 1;
  int64 created_time = 2;
  map<string, int64> quotas = 3;
}

// State of a Kafka credential
message KafkaCredential {
  string identifier = 1;
  string secret_hash = 2;
  int64 created_time = 3;
  int64 expiration_time = 4;
}

// Kafka user ingress event
message KafkaUserRequest {
  string user_name = 1;

  message AddRequested {
    map<string, int64> quotas = 3;
  }

  message RemoveRequested {
  }

  message AddCredentialRequested {
    string identifier = 1;
    string secret_value = 2;
    int64 expiration_time = 3;
  }

  message RevokeCredentialRequested {
    string identifier = 1;
  }

  oneof type {
    AddRequested add_requested = 2;
    RemoveRequested remove_requested = 3;
    AddCredentialRequested add_credential_requested = 4;
    RevokeCredentialRequested revoke_credential_requested = 5;
  }
}

// Kafka user egress event
message KafkaUserEvent {
  string user_name = 1;
  int64 event_time = 2;

  message UserAdded {
    map<string, int64> quotas = 3;
  }

  message UserRemoved {
  }

  message CredentialAdded {
    string identifier = 1;
    string secret_hash = 2;
    int64 expiration_time = 3;
  }

  message CredentialRevoked {
    string identifier = 1;
  }

  message CredentialExpired {
    string identifier = 1;
  }

  oneof type {
    UserAdded user_added = 3;
    UserRemoved user_removed = 4;
    CredentialAdded credential_added = 5;
    CredentialRevoked credential_revoked = 6;
    CredentialExpired credential_expired = 7;
  }
}

// Kafka user egress snapshot
message KafkaUserSnapshot {
  string user_name = 1;
  int64 created_time = 2;
  repeated KafkaCredential credentials = 4;
  map<string, int64> quotas = 5;

  enum LifecycleStatus {
    OK = 0;
    GONE = 1;
  }

  LifecycleStatus lifecycle_status = 3;
  map<string, double> recent_metrics = 6;
}
